YoloV1(
  (cnn): ModuleList(
    (0): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
        (1): LeakyReLU(negative_slope=0.1)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
    )
    (1): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): LeakyReLU(negative_slope=0.1)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
    )
    (2): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.1)
        (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): LeakyReLU(negative_slope=0.1)
        (4): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (5): LeakyReLU(negative_slope=0.1)
        (6): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): LeakyReLU(negative_slope=0.1)
        (8): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
    )
    (3): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.1)
        (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): LeakyReLU(negative_slope=0.1)
        (4): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (5): LeakyReLU(negative_slope=0.1)
        (6): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): LeakyReLU(negative_slope=0.1)
        (8): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (9): LeakyReLU(negative_slope=0.1)
        (10): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): LeakyReLU(negative_slope=0.1)
        (12): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (13): LeakyReLU(negative_slope=0.1)
        (14): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (15): LeakyReLU(negative_slope=0.1)
        (16): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (17): LeakyReLU(negative_slope=0.1)
        (18): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (19): LeakyReLU(negative_slope=0.1)
        (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
    )
    (4): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): LeakyReLU(negative_slope=0.1)
        (2): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): LeakyReLU(negative_slope=0.1)
        (4): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (5): LeakyReLU(negative_slope=0.1)
        (6): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): LeakyReLU(negative_slope=0.1)
        (8): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): LeakyReLU(negative_slope=0.1)
        (10): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (11): LeakyReLU(negative_slope=0.1)
      )
    )
    (5): ConvolutionBlock(
      (convolutions): Sequential(
        (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): LeakyReLU(negative_slope=0.1)
        (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): LeakyReLU(negative_slope=0.1)
      )
    )
  )
  (pool_flatten): Sequential(
    (0): AdaptiveAvgPool2d(output_size=1)
    (1): Flatten(start_dim=1, end_dim=-1)
  )
  (mlp): Mlp(
    (fully_connected): Sequential(
      (0): Linear(in_features=1024, out_features=4096, bias=True)
      (1): LeakyReLU(negative_slope=0.1)
      (2): Linear(in_features=4096, out_features=3038, bias=True)
    )
  )
)